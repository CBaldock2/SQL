# In this SQL, I query a DB with multiple tables in it to quantify statistics about customer and order data

# Selects the tables I am using.

SELECT *
FROM BIT_DB.customers
WHERE length(order_id) = 6
AND order_id <> 'Order ID';

SELECT *
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

SELECT *
FROM BIT_DB.FebSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

# How many Orders were palced in January?
SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

# How many of January's orders were iPhones?
SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID'
AND Product = "iPhone";

# Selects the customers account number for all orders placed in February.
SELECT DISTINCT Customers.acctnum
FROM BIT_DB.FebSales Feb
JOIN BIT_DB.customers Customers
ON Feb.orderID = Customers.order_id
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

# What was the the product and price for the cheapest item sold in January?
SELECT DISTINCT Product, MIN(price)
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

# What is the total revenue earned for each product sold in January?
SELECT Product
, ROUND(SUM(Quantity)*price,2) AS revenue
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID'
GROUP BY Product;

# What are the products, how many were sold, and what is the revenue for each product sold that was sold at 548 Lincoln St, Seattle, WA 98101?
SELECT 
Product
, SUM(Quantity)
, SUM(Quantity)*price AS revenue
FROM BIT_DB.FebSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID'
AND location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY Product;

# How many customers ordered more than 2 products in February, and what was the average price spent?
SELECT 
COUNT(DISTINCT Customers.acctnum) AS customers
, ROUND(AVG(quantity*price),2) AS avgPrice
FROM BIT_DB.FebSales Feb
JOIN BIT_DB.customers Customers
ON Feb.orderID = Customers.order_id
WHERE length(orderID) = 6
AND orderID <> 'Order ID'
AND Feb.Quantity > 2;

# What were the dates and time stamps for all the orders placed between February 13th and February 18th?
SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate BETWEEN '02/13/19 00:00' AND '02/18/19 00:00'
ORDER BY orderdate;

# Which locations had an order on February 18th, 2019 at 1:35?
SELECT location
FROM BIT_DB.FebSales
WHERE orderdate = '02/18/19 01:35';

# How many orders were placed on February 18th?
SELECT SUM(quantity)
FROM BIT_DB.FebSales
WHERE orderdate LIKE '02/18/19%';

# Select products with "Batteries" in the middle of the Product description.
SELECT DISTINCT Product
FROM BIT_DB.FebSales
WHERE Product LIKE '%Batteries%';

# Which products end in a price of 99 cents, and what is the full price of the product?
SELECT DISTINCT Product, Price
FROM BIT_DB.FebSales
WHERE Price LIKE '%.99';

# How many of each product was sold at a Los Angeles location?
SELECT Product
, SUM(quantity)
FROM BIT_DB.FebSales
WHERE location like '%Los Angeles%'
GROUP BY Product;

# Which locations in New York received at least 3 orders in January, and how many did they receive?
SELECT DISTINCT location
, COUNT(orderID)
FROM BIT_DB.JanSales
WHERE LENGTH(orderID) = 6
AND location LIKE '%NY%'
GROUP BY location
HAVING COUNT(orderID) >= 3;

# How many of each type of headphones were sold in February?
SELECT Product
, SUM(Quantity)
FROM BIT_DB.FebSales
WHERE LENGTH(orderID) = 6
AND Product LIKE '%Headphones%'
GROUP BY Product;

# What was the average amount spent per accounts?
SELECT SUM(Sales.quantity*Sales.price) / COUNT(Cust.acctnum)
FROM BIT_DB.customers Cust
JOIN BIT_DB.FebSales Sales
ON Cust.order_id = Sales.orderID
WHERE length(orderid) = 6;

# What was the average products sold per accounts?
SELECT SUM(Sales.quantity) / COUNT(Cust.acctnum)
FROM BIT_DB.customers Cust
JOIN BIT_DB.FebSales Sales
ON Cust.order_id = Sales.orderID
WHERE length(orderid) = 6;

# Which product brought in the most amount of money in January, and how muuch did it bring in?
SELECT Product
, SUM(quantity * Price)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6
GROUP BY Product
ORDER BY SUM(quantity * Price) DESC
LIMIT 1;
